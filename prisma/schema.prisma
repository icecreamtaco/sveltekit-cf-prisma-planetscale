generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  // url                  = "prisma://aws-us-east-1.prisma-data.com/?api_key=rsw-6iQQGBCy-PxiipJa3UARRu8BCd7Fa_A2oImPyBfobsqyKSfPVuc7wjOjTWt1"
  url                  = "mysql://ki7dzi5rmluj:pscale_pw_E9ioAEeKP2FanA-PeJzVXyC-1Rk9UvUenLaVIyjfsMM@nzzq3n9srfce.us-east-3.psdb.cloud/dashboard?sslaccept=strict"
  referentialIntegrity = "prisma"
}

model user {
  id               String   @id
  stxAddress       String   @unique
  roleId           Int
  firstName        String
  lastName         String
  displayName      String
  email            String
  githubHandle     String?
  twitterHandle    String?
  discordHandle    String?
  discordId        String?
  stxWalletAddress String
  stxWalletMemo    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  role role @relation(fields: [roleId], references: [id])


  session session[]

  Sender            notification[]      @relation("Sender")
  Recipient         notification[]      @relation("Recipient")
  userProjectFollow userProjectFollow[]
  comment           comment[]
  projectMember     projectMember[]
  project           project[]
  projectAnswer     projectAnswer[]
}

model role {
  id               Int                @id @unique @default(autoincrement())
  name             String
  createdAt        DateTime           @default(now())
  notificationType notificationType[]
  user             user[]
}

model notificationType {
  id        Int      @id @unique @default(autoincrement())
  name      String
  roleId    Int
  template  String   @db.Text
  createdAt DateTime @default(now())

  role role @relation(fields: [roleId], references: [id])


  notification notification[]
}

model notification {
  id          Int      @id @unique @default(autoincrement())
  typeId      Int
  projectId   Int
  senderId    String
  recipientId String
  message     String   @db.Text
  isRead      Boolean
  createdAt   DateTime @default(now())

  sender    user @relation("Sender", fields: [senderId], references: [id])
  recipient user @relation("Recipient", fields: [recipientId], references: [id])

  type    notificationType @relation(fields: [typeId], references: [id])
  project project          @relation(fields: [projectId], references: [id])


  @@index([projectId])
  @@index([recipientId])
}

model session {
  id               Int      @id @unique @default(autoincrement())
  userId           String
  refreshTokenHash String?
  device           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user user @relation(fields: [userId], references: [id])

  @@unique([userId, device])
}

model userProjectFollow {
  id Int @id @unique @default(autoincrement())

  userId    String
  projectId Int
  createdAt DateTime @default(now())

  user    user    @relation(fields: [userId], references: [id])
  project project @relation(fields: [projectId], references: [id])


  @@unique([userId, projectId])
}

model project {
  id         Int      @id @unique @default(autoincrement())
  title      String
  userId     String
  typeId     Int
  statusId   Int
  isWishlist Boolean
  isTeam     Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user              user                @relation(fields: [userId], references: [id])
  userProjectFollow userProjectFollow[]
  payment           payment[]

  type   projectType   @relation(fields: [typeId], references: [id])
  status projectStatus @relation(fields: [statusId], references: [id])

  projectMember projectMember[]
  notification  notification[]
  comment       comment[]

  projectAnswer projectAnswer[]
}

model payment {
  id        Int @id @unique @default(autoincrement())
  projectId Int
  typeId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project project     @relation(fields: [projectId], references: [id])
  type    paymentType @relation(fields: [typeId], references: [id])
}

model paymentType {
  id        Int      @id @unique @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  payment payment[]
}

model projectStatus {
  id          Int       @id @unique @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  project     project[]
}

model projectType {
  id            Int    @id @unique @default(autoincrement())
  name          String
  fundingStream String
  maxFunding    String
  redirectUrl   String
  color         String
  order         Int

  createdAt DateTime  @default(now())
  project   project[]
}

model projectQuestion {
  id          Int      @id @unique @default(autoincrement())
  name        String
  description String?  @db.Text
  group       String
  order       Int
  createdAt   DateTime @default(now())

  projectAnswer projectAnswer[]
}

model comment {
  id        Int      @id @unique @default(autoincrement())
  userId    String
  text      String   @db.Text
  projectId Int
  createdAt DateTime @default(now())

  user    user    @relation(fields: [userId], references: [id])
  project project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model projectMember {
  id        Int      @id @unique @default(autoincrement())
  userId    String
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    user    @relation(fields: [userId], references: [id])
  project project @relation(fields: [projectId], references: [id])


  @@unique([userId, projectId])
}

model projectAnswer {
  id Int @id @unique @default(autoincrement())

  userId     String
  projectId  Int
  questionId Int
  answer     String   @db.Text
  createdAt  DateTime @default(now())

  user            user            @relation(fields: [userId], references: [id])
  project         project         @relation(fields: [projectId], references: [id])
  projectQuestion projectQuestion @relation(fields: [questionId], references: [id])

  @@index([userId])
  @@index([projectId])
}
